@page "/Explore"
@layout HomeLayout 
@using Memoireclass.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>About Us - ThesisHub</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>

    <!-- Header -->
    <header>
        <div class="logo">ThesisHub</div>
        <nav>
            <ul>
                <li><a href="/">Home</a></li>
                <li><a href="/Explore">Browse Theses</a></li>
                <li><a href="/About" class="active">About</a></li>
                <li><a href="/Signup" class="btn">Sign Up</a></li>
                <li><a href="/Login" class="btn">Login</a></li>
            </ul>
        </nav>
    </header>

       <div class="search-container">
    <input type="text" value="@searchText" @oninput="OnInput" placeholder="Search by title, field, or keyword..." />
        </div>

@if (suggestions.Any()){
   <div class="grid grid-cols-1 gap-4 m-2">
 @foreach (var memoire in suggestions){
   
    string[] keywordsArray = (memoire?.Keywords != null) 
    ? memoire.Keywords.Split(',') 
    : Array.Empty<string>();
        <div class="page-container" style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
            <div class="thesis-card ">
            <div class="card-header">
            <h3 class="thesis-title rounded-xl" style="margin: 0; display: flex; align-items: center; gap: 10px;">
            @* <div class="rounded-xl" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; "> *@
            <div style="display: flex; align-items: center; gap: 10px; ">
             @if (!string.IsNullOrEmpty(memoire.ProfessorPicturePath )){
            <img src="@($"http://localhost:5110/{memoire.ProfessorPicturePath}")"
             alt="Professor"
             style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                }
                else{
                 <img src="@UserImage" alt="Profile Picture"  style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                }
            <h4 style="text-decoration: none; font-weight: 600; color: black;">  @memoire.ProfessorName</h4>
            </div>
                    </h3>
                <span class="thesis-type ">@memoire.Date.ToShortDateString()</span>
            </div>
            <div class="card-body">
                 <h1 class="text-xl font-semibold" style="color:#001f54 ;font-weight: bolder;  font-size: 3em;">@memoire.Title</h1>
                 <br>
                <div class="thesis-info">
                    <svg viewBox="0 0 24 24"><path d="M12 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8zm0 10c4.42 0 8 1.79 8 4v2H4v-2c0-2.21 3.58-4 8-4z"/></svg>
                    <span>Author : @memoire.AuthorName</span>
                </div>
                <div class="thesis-info">
                    <svg viewBox="0 0 24 24"><path d="M20 6h-4V4c0-1.11-.89-2-2-2H6c-1.11 0-2 .89-2 2v16c0 1.11.89 2 2 2h12c1.11 0 2-.89 2-2v-4h2l2-3V8l-2-3zM8 4h8v2H8V4zm12 16H6V4h2v2h8V4h2v16z"/></svg>
                    <span>Field : @memoire.Field</span>
                </div>
                <div class="thesis-info">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-calendar4" viewBox="0 0 16 16">
                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1zm13 3H1v9a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1z"/>
                    </svg>
                    <span>Year :@memoire.Date.Year</span>
                </div>
                <br>
                <div class="thesis-info ">
                @foreach(var keyword in keywordsArray){
                    <div class="keyword">
                        @keyword
                    </div>
                }
                </div>
            </div>
              <div class="mt-3 mb-2" style="display: flex; justify-content: center; align-items: center;">
        <embed src="@($"http://localhost:5110/{memoire.FilePath}")" type="application/pdf" width="80%" height="400px"  />
         </div> 
           <br>
            </div>
        
        </div>
            <br>

}
</div>}
</body>

@code {
    private string UserImage = "emptyimage.jpg"; // Default image
    private string searchText = string.Empty;
    private List<Memoire> suggestions = new();
    private System.Timers.Timer debounceTimer;
  private string searchTerm;

    protected override void OnInitialized()
    {
         searchTerm = NavigationManager.Uri;
        if (NavigationManager.Uri.Contains("?search="))
        {
            searchTerm = NavigationManager.Uri.Split("?search=")[1];
            searchTerm = Uri.UnescapeDataString(searchTerm);
           searchText =searchTerm?.ToString() ?? "";

          } 
    }
   private void OnInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? "";

        // Stop previous timer if it exists
        debounceTimer?.Stop();

        // Set up a new timer to debounce the input
        debounceTimer = new System.Timers.Timer(400); // 400ms debounce time
        debounceTimer.Elapsed += async (s, args) =>
        {
            debounceTimer?.Stop(); // Stop the timer to avoid multiple calls
            await InvokeAsync(PerformSearch); // Perform the search
        };
        debounceTimer.Start(); // Start the timer
    }

    // Perform search by calling the backend API
    private async Task PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            suggestions = await Http.GetFromJsonAsync<List<Memoire>>(
                $"http://localhost:5110/api/search/suggestions?term={searchText}");
        }
        else
        {
            suggestions.Clear();
        }
    }


    
}

