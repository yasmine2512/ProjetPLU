@page "/memoire/{MemoireID:int}"
@using MyBlazorFrontend.Models  // Ensure you import the Models namespace
@inject HttpClient Http
@inject SummarizeService SummarizerService

<h3>@memoire?.Title</h3>

@if (memoire is null)
{
    <p>Chargement en cours...</p>
}
else
{
    <div class="mb-4">
        <p><strong>Auteur :</strong> @memoire.AuthorName</p>
        <p><strong>Sp√©cialit√© :</strong> @memoire.Field</p>
        <p><strong>Mots-cl√©s :</strong> @memoire.Keywords</p>
        <p><strong>Date :</strong> @memoire.Date.ToShortDateString()</p>

        <div class="mt-4">
            <h4>üìù R√©sumer la th√®se</h4>
            <button class="btn btn-success" @onclick="SummarizeThesis" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>R√©sum√© en cours...</span>
                }
                else
                {
                    <span>R√©sumer</span>
                }
            </button>

            @if (!string.IsNullOrEmpty(SummaryResult))
            {
                <div class="mt-3">
                    <h5>R√©sum√© :</h5>
                    <textarea class="form-control" rows="10">@SummaryResult</textarea>
                </div>
            }
        </div>
    </div>

    <h4>üìö Th√®ses similaires</h4>
    @if (similarMemoires.Count == 0)
    {
        <p>Aucune th√®se similaire trouv√©e.</p>
    }
    else
    {
        <div class="row">
            @foreach (var item in similarMemoires)
            {
                <div class="col-md-6 mb-3">
                    <div class="card shadow-sm p-3 rounded-3">
                        <div class="card-body">
                            <h5 class="card-title">@item.Title</h5>
                            <p class="card-text">
                                <strong>Auteur :</strong> @item.AuthorName<br />
                                <strong>Sp√©cialit√© :</strong> @item.Field<br />
                                <strong>Date :</strong> @item.Date.ToShortDateString()
                            </p>
                            <a class="btn btn-primary btn-sm" href="/memoire/@item.MemoireID">Voir</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    [Parameter]
    public int MemoireID { get; set; }

    private Memoire? memoire;
    private List<Memoire> similarMemoires = new();

    private string SummaryResult;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            memoire = await Http.GetFromJsonAsync<Memoire>($"api/memoires/{MemoireID}");
            similarMemoires = await Http.GetFromJsonAsync<List<Memoire>>($"/api/search/similar/{MemoireID}");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur lors du chargement des donn√©es : " + ex.Message);
        }
    }

    private async Task SummarizeThesis()
    {
        if (memoire == null || string.IsNullOrEmpty(memoire.FilePath))
        {
            SummaryResult = "Chemin du fichier PDF non trouv√©.";
            return;
        }

        try
        {
            isLoading = true;
            SummaryResult = await SummarizerService.SummarizeThesisAsync(MemoireID, memoire.FilePath);
        }
        catch (Exception ex)
        {
            SummaryResult = $"Erreur lors du r√©sum√© : {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
