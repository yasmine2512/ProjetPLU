@page "/profile/{userId:int}"
@layout MainLayout
@inject HttpClient Http
@using System.Text.Json
@using Memoireclass.Models
@using System.ComponentModel.DataAnnotations
@inject ILogger<ProfileView> Logger
@inject IJSRuntime JSRuntime
@inject UserState UserState
@using Comment.Models
@using CommentDto.Models
@using Favorite.Models
@using FavoriteDto.Models
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager




  @if(user != null){
<div class="profile-container">
    <div class="profile-card">
      
  <!-- Profile Image -->
   
   @if (!string.IsNullOrEmpty(user.PicturePath))
{
    <img src="@($"http://localhost:5110/{user.PicturePath}")" alt="Profile Picture" class="profile-image" width="150" />
}
else
{
    <img src="@UserImage" alt="Profile Picture" class="profile-image" />
 
}


    <h4><strong> @user.FullName </strong></h4>
 
     @if(user.Role == "Administrator" &&  UserState.CurrentUser.Role == "Student"){
        <button class="btn btn-outline-primary" @onclick="ShowSendEmailModal">Send Email</button>
            }
     
     @if(user.Role == "Student" &&  UserState.CurrentUser.Role == "Administrator"){
        <button class="btn btn-outline-primary" @onclick="DeleteUser">Delete This User</button>
     }
@if (showEmailModal) 
{
   <div class="modal" style="display: block; background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add a These</h5>
                    <button type="button" class="close" @onclick="CancelForm">&times;</button>
                </div>
                 <EditForm Model="@emailModel" OnValidSubmit="@SendEmail">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                <div class="modal-body">
                    <div class="form-group">
                         <label>Subject:</label>
                            <InputText id="subject" @bind-Value="emailModel.Subject" class="form-control" />
                    </div>
                    <div class="form-group">
                         <label>Body:</label>
                            <InputTextArea id="body" @bind-Value="emailModel.Body" class="form-control" rows="5" />
                    </div>
                    
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Send</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseSendEmailModal">Cancel</button>
                </div>
                </EditForm>
            </div>
        </div>
   </div>
    
}

   
     <div class="mt-4">
            <p><strong>University:</strong> @user.University</p>
            <p><strong>Major:</strong> @user.Major</p>
            <p><strong>Spe cialty:</strong> @user.Specialty</p>
 
        </div>

       
    </div>

     @if (user.Role == "Administrator")
    {
    <br>
    <br>
    <hr>
    <br>
  <h2 class="text-2xl font-bold mb-2 mt-2" style="color: #001f54; font-size: 48px;"> &nbsp; Theses</h2>
@if (userTheses == null)
{
    <p class="d-flex justify-content-center align-items-center">Loading...</p>
     <br>
}
else if (userTheses.Count == 0)
{ 
    <p class="d-flex justify-content-center align-items-center"> No theses found.</p>
    <br>
}
else
{
     <div class="grid grid-cols-1 gap-4 m-2">
 @foreach (var memoire in userTheses){
    string[] keywordsArray = memoire.Keywords.Split(',');
            <div class="thesis-card ">
            <div class="card-header">
            <h3 class="thesis-title rounded-xl" style="margin: 0; display: flex; align-items: center; gap: 10px;">
            <div style="display: flex; align-items: center; gap: 10px; ">
             @if (!string.IsNullOrEmpty(memoire.ProfessorPicturePath )){
            <img src="@($"http://localhost:5110/{memoire.ProfessorPicturePath}")"
             alt="Professor"
             style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                }
                else{
                 <img src="@UserImage" alt="Profile Picture"  style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                }
             @if(memoire.ProfessorID == UserState.CurrentUser.UserID){
            <h4> <a href="@($"/profile")" style="text-decoration: none;  font-weight: 600; color: black;">
            @memoire.ProfessorName</a></h4>
            }else{
            <h4> <a href="@($"/profile/{memoire.ProfessorID}")" style="text-decoration: none; font-weight: 600; color: black;">
            @memoire.ProfessorName</a></h4>
            }
            </div>
                    </h3>
                <span class="thesis-type ">@memoire.Date.ToShortDateString()</span>
            </div>
            <div class="card-body">
                 <h1 class="text-xl font-semibold" style="color:#001f54 ;font-weight: bolder;  font-size: 3em;">@memoire.Title</h1>
                 <br>
                <div class="thesis-info">
                    <svg viewBox="0 0 24 24"><path d="M12 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8zm0 10c4.42 0 8 1.79 8 4v2H4v-2c0-2.21 3.58-4 8-4z"/></svg>
                    <span>Author : @memoire.AuthorName</span>
                </div>
                <div class="thesis-info">
                    <svg viewBox="0 0 24 24"><path d="M20 6h-4V4c0-1.11-.89-2-2-2H6c-1.11 0-2 .89-2 2v16c0 1.11.89 2 2 2h12c1.11 0 2-.89 2-2v-4h2l2-3V8l-2-3zM8 4h8v2H8V4zm12 16H6V4h2v2h8V4h2v16z"/></svg>
                    <span>Field : @memoire.Field</span>
                </div>
                <div class="thesis-info">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-calendar4" viewBox="0 0 16 16">
                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1zm13 3H1v9a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1z"/>
                    </svg>
                    <span>Year :@memoire.Date.Year</span>
                </div>
                <br>
                <div class="thesis-info ">
                @foreach(var keyword in keywordsArray){
                    <div class="keyword">
                        @keyword
                    </div>
                }
                </div>
            </div>
            <div class="consultbutton">
            <a class="consult-button " href="@($"/memoire/{memoire.MemoireID}")" style="text-decoration: none;" ><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-book" viewBox="0 0 16 16">
  <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783"/>
</svg> Consult Document</a>
             </div>
              <div class="mt-3 mb-2" style="display: flex; justify-content: center; align-items: center;">
        <embed src="@($"http://localhost:5110/{memoire.FilePath}")" type="application/pdf" width="80%" height="400px"  />
         </div>  
                     <div class="card-footer">
                <button class=" px-4 py-2 rounded btn" @onclick="() => AddToFavorites(memoire)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-heart" viewBox="0 0 16 16">
                    <path d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143q.09.083.176.171a3 3 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15"/>
                    </svg>
                  &nbsp;  Delete These</button>
                <button class="px-4 py-2 rounded btn" @onclick="() => ShowComments(memoire)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chat" viewBox="0 0 16 16">
                    <path d="M2.678 11.894a1 1 0 0 1 .287.801 11 11 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8 8 0 0 0 8 14c3.996 0 7-2.807 7-6s-3.004-6-7-6-7 2.808-7 6c0 1.468.617 2.83 1.678 3.894m-.493 3.905a22 22 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a10 10 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9 9 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105"/>
                    </svg>
                   &nbsp; Comments</button>
            </div>
            <br>
            @if (selectedMemoire != null && selectedMemoire.MemoireID == memoire.MemoireID && isactive == true){
                <hr>
        <div class="comments-section mt-4" style="margin: 30px;">
     
                        <EditForm Model="newComment" OnValidSubmit="SubmitComment">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <InputTextArea @bind-Value="newComment.Text" placeholder="Write a comment..." class="form-control mb-2" />
                            <button type="submit" class="btn">Post Comment</button>
                        </EditForm>
                        <br>
                         <h4 class="font-semibold">Comments</h4>
                        @if (comments != null && comments.Any())
                    {
                        @foreach (var comment in comments)
                        {
                             <div class="comment">
        <div style="display: flex; gap: 10px; align-items: center; margin-bottom: 3px;">
            @if (!string.IsNullOrEmpty(comment.PicturePath))
            {
                <img src="@($"http://localhost:5110/{comment.PicturePath}")"
                     alt="User"
                     style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />
            }
            else
            {
                <img src="@UserImage" alt="Profile Picture"  style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />
            }
            @if(comment.UserID == UserState.CurrentUser.UserID){
                <a href="@($"/profile")" style="text-decoration: none; color: black; font-weight: 600;">
                    @comment.FullName
                </a>
            }else{
                <a href="@($"/profile/{comment.UserID}")" style="text-decoration: none; color: black; font-weight: 600;">
                    @comment.FullName
                </a>}
            <p style="font-size: 0.875rem; color: gray;">@comment.Date.ToShortDateString()</p>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center;">
            <p style="margin-right: 10px; flex-grow: 1; word-break: break-word;">@comment.Text</p>
            @if ( comment.UserID == UserState.CurrentUser.UserID)
            {
                <button class="delete-button bi-trash-nav-menu" @onclick="() => DeleteComment(comment.CommentID)" style="border: none; cursor: pointer; color: red; width: 30px; height: 30px; border-radius: 50%;">
                </button>
            }
        </div>
    </div>
                        }
                        }else 
                            {
                             <p>No comments available</p>
                            }
        </div>
                }
    </div>
        <br> 
        }
    </div>
}
     }
   
</div>
}


@code {
    private string UserImage = "emptyimage.jpg"; // Default image
    private Memoire selectedMemoire;
   
    private List<CommentDto> comments = new List<CommentDto>(); 
    private Comment newComment = new();
    private bool isactive = false;

    [Parameter]
    public int userId { get; set; }
    private bool showEmailModal = false;
    private SendEmailViewModel emailModel = new SendEmailViewModel();

    private User user;
    List<Memoire> userTheses;
    protected override async Task OnParametersSetAsync()
    {
        user = await Http.GetFromJsonAsync<User>($"api/users/{userId}");
      userTheses = await Http.GetFromJsonAsync<List<Memoire>>($"api/these/user/{userId}");
    }

 private void ShowSendEmailModal()
    {
        showEmailModal = true;
    }

    private void CloseSendEmailModal()
    {
        showEmailModal = false;
        emailModel = new SendEmailViewModel(); // Reset the form
    }
    private void CancelForm()
    {
        showEmailModal = false; // Hide the form when cancel is clicked
    }
      private async Task SendEmail()
    {
        if (user != null)
        {
            var subject = Uri.EscapeDataString(emailModel.Subject);
            var body = Uri.EscapeDataString(emailModel.Body);
         
            var mailtoUri = $"mailto:{user.Email}?subject={subject}&body={body}";
            NavigationManager.NavigateTo(mailtoUri, forceLoad: false);
            CloseSendEmailModal();
        }
    }
private async Task ShowComments(Memoire memoire)
    {
        if(isactive){
            isactive = false;
        }else{
            isactive = true;
        selectedMemoire = memoire;

            try{
        // Fetch comments for the selected Memoire
        comments = await Http.GetFromJsonAsync<List<CommentDto>>($"api/comment/memoire/{memoire.MemoireID}");
        StateHasChanged();
        Console.WriteLine($"Fetched {comments?.Count} comments for Memoire {memoire.MemoireID}");
        Console.WriteLine("Comments list: " + JsonSerializer.Serialize(comments));
        // Check if no comments were found
        if (comments == null || !comments.Any())
        {
            comments = new List<CommentDto>(); // Ensure it's not null
            Console.WriteLine("No comments found for the selected Memoire.");
        }
    }
    catch (Exception ex)
    {
        // Handle any errors that occur during the HTTP request
        Console.WriteLine($"Error fetching comments for Memoire {memoire.MemoireID}: {ex.Message}");
        comments = new List<CommentDto>(); // Avoid null reference
    }}
    }

    // Function to handle adding a new comment
    private async Task SubmitComment()
    {
        if (!string.IsNullOrWhiteSpace(newComment.Text))
        {
            @* newComment.Date = DateTime.Now;*@
            newComment.MemoireID = selectedMemoire.MemoireID; 

            if (UserState.CurrentUser != null)
            {
              newComment.UserID = UserState.CurrentUser.UserID; 
             
            }
            var json = JsonSerializer.Serialize(newComment);
        Console.WriteLine("Comment being sent: " + json);

            var response = await Http.PostAsJsonAsync("api/comment", newComment);

            if (response.IsSuccessStatusCode)
            {
                // After posting the comment, refresh the comment list.
            
                 newComment = new Comment
            {
                MemoireID = selectedMemoire.MemoireID,
                UserID = UserState.CurrentUser.UserID
            };
              // Clear the comment input field
            }
             else
        {
              
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to post comment: " + error);
        }
        isactive = false;
        await ShowComments(selectedMemoire);
        }
    }

   private async Task AddToFavorites(Memoire memoire)
{
    if (UserState.CurrentUser == null)
    {
        Console.WriteLine("User not logged in.");
        return;
    }

    var favorite = new FavoriteDto
    {
        UserID = UserState.CurrentUser.UserID,
        MemoireID = memoire.MemoireID,

    };

    try
    {
        var response = await Http.PostAsJsonAsync("api/favorite", favorite);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Memoire added to favorites!");
            // Optionally show toast or update UI
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error adding to favorites: {error}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception adding to favorites: " + ex.Message);
    }
}


     private async Task DeleteUser()
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user and all their data?");

        if (confirm)
        {
            var response = await Http.DeleteAsync($"api/users/{user.UserID}");

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/profile"); 
            }
            else
            {
                Console.WriteLine("Error deleting user.");
            }
        }
    }
    private async Task DeleteComment(int commentId)
{
    bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
    if (!confirmed)
        return;

    try
    {
        var response = await Http.DeleteAsync($"api/comment/{commentId}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Comment deleted successfully.");
            isactive = false;
            await ShowComments(selectedMemoire); // Refresh the comments list
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to delete comment: {error}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Error deleting comment: " + ex.Message);
     } 
}

    public class SendEmailViewModel
{
    [Required]
    public string Subject { get; set; }

    [Required]
    public string Body { get; set; }
}
}
