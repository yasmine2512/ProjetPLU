@page "/profile"
@layout MainLayout
@inject HttpClient Http
@inject UserState UserState
@using System.Text.Json
@using Memoireclass.Models
@using Comment.Models
@using CommentDto.Models

<style>
    .btn{
    background-color: #002855 ;
    color: white;
}
.btn:hover{
    background-color:  #004080 ;
}
</style>

<div class="profile-container">
    <div class="profile-card">
  <!-- Profile Image -->
   
   @if (!string.IsNullOrEmpty(UserState.CurrentUser?.PicturePath))
{
    <img src="@($"http://localhost:5110/{UserState.CurrentUser.PicturePath}")" alt="Profile Picture" class="profile-img" width="150" />
}
else
{
    <img src="@UserImage" alt="Profile Picture" class="profile-img" />
 
}


    <h4><strong> @UserState.CurrentUser.FullName </strong></h4>
 
         <!-- File input and label (styled as a button) -->
    <div class="mt-3">
       <InputFile id="fileInput" style="display: none;" OnChange="HandleFileSelected" accept="image/*" />
         <label for="fileInput" class="btn btn-outline-primary">Change Picture</label>
        @* <input id="fileInput" type="file" @onchange="HandleImageChange" style="display: none;" accept="image/*" />  *@
    </div>
     <div class="mt-4">
            <p><strong>University:</strong> @UserState.CurrentUser.University</p>
            <p><strong>Major:</strong> @UserState.CurrentUser.Major</p>
            <p><strong>Specialty:</strong> @UserState.CurrentUser?.Specialty</p>
 
        </div>

       
    </div>

     @if (UserState.CurrentUser.Role == "Administrator")
    { 
    
       <br>
        <br>
        <hr>


       
         <div style="display: flex; justify-content: center; margin-top: 2rem;">
            <div style="border: 1px solid #ccc; border-radius: 10px; padding: 2rem; width: 600px; background-color: #f9f9f9;">
             
            <h3>Add a These</h3>

            <div class="form-group">
                <label>Title</label>
                <input class="form-control" @bind="newThesis.Title" />
            </div>
            <div class="form-group">
                <label>Field</label>
                <input class="form-control" @bind="newThesis.Field" />
            </div>
            <div class="form-group">
                <label>Keywords</label>
                <input class="form-control" @bind="newThesis.Keywords" />
            </div>
            <div class="form-group">
                <label>Author Name</label>
                <input class="form-control" @bind="newThesis.AuthorName" />
            </div>
            <div class="form-group mt-2">
                <InputFile OnChange="HandleThesisUpload" accept="application/pdf" />
            </div>

            <div class="mt-3">
                <button class="btn btn-success" @onclick="SubmitThesisAsync">Submit</button>

            </div>

         </div>
         </div>
          <br>
    <br>
    <hr>
    <br>
  <h2> &nbsp; &nbsp; My Theses</h2>
@if (userTheses == null)
{
    <p class="d-flex justify-content-center align-items-center">Loading...</p>
    <br>
}
else if (userTheses.Count == 0)
{
    <p class="d-flex justify-content-center align-items-center">No theses found.</p>
    <br>
}
else
{
    <div class="grid grid-cols-1 gap-4 m-2">
        @foreach (var memoire in userTheses)
        {<div class="thesis-card p-4 bg-white border rounded shadow-lg m-3">
          
<div class="rounded-xl" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; ">
    <!-- Left: Profile picture and name -->
    <div style="display: flex; align-items: center; gap: 10px;">
         @if (!string.IsNullOrEmpty(memoire.ProfessorPicturePath))
{
    <img src="@($"http://localhost:5110/{memoire.ProfessorPicturePath}")"
             alt="Professor" style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
}
else
{
    <img src="@UserImage" alt="Profile Picture"  style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
 
}

        <h4 style="margin: 0; font-weight: 600;">@memoire.ProfessorName</h4>
    </div>

    <!-- Right: Date -->
    <p style="margin: 0; color: gray; font-size: 0.875rem;">@memoire.Date.ToShortDateString()</p>
</div>
    
            <div class="mb-2">
                <h3 class="text-xl font-semibold">@memoire.Title</h3>
                <p><strong>Field:</strong> @memoire.Field</p>
                <p><strong>Keywords:</strong> @memoire.Keywords</p>
                <p><strong>Author:</strong> @memoire.AuthorName</p>
                <p><strong>Date:</strong> @memoire.Date.ToShortDateString()</p>
            </div>
            <div class="mt-3 mb-2">
        <embed src="@($"http://localhost:5110/{memoire.FilePath}")" type="application/pdf" width="100%" height="400px" />
         </div>
         <div class="flex gap-3 justify-end mt-2">
        <button class=" px-4 py-2 rounded btn" >Delete These </button>
      
         <button class="px-4 py-2 rounded btn" @onclick="() => ShowComments(memoire)">Comments</button>
    </div>
    <!-- Comments Section -->

 @if (selectedMemoire != null && selectedMemoire.MemoireID == memoire.MemoireID)
                {
        <div class="comments-section mt-4">
             <!-- Comment Form -->
                        <EditForm Model="newComment" OnValidSubmit="SubmitComment">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <!-- Text area for new comment -->
                            <InputTextArea @bind-Value="newComment.Text" placeholder="Write a comment..." class="form-control mb-2" />
                            <button type="submit" class="btn">Post Comment</button>
                        </EditForm>
                        <br>
                         <h4 class="font-semibold">Comments</h4>
                 @if (comments != null && comments.Any())
                 {
                 @foreach (var comment in comments)
                {
                 <div class="comment">
                 <div style="display: flex; gap: 10px; align-items: center;">
                   @if (!string.IsNullOrEmpty(comment.PicturePath))
                    {
                     <img src="@($"http://localhost:5110/{comment.PicturePath}")"
                        alt="User"
                    style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />
                     }
                    else
                    {
                  <img src="@UserImage" alt="Profile Picture"  style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />
                        }
                                   @if(comment.UserID == UserState.CurrentUser.UserID){
                    <a href="@($"/profile")" style="text-decoration: none; color: black; font-weight: 600;">
                                        @comment.FullName
                                    </a>
                }else{
                                    <a href="@($"/profile/{comment.UserID}")" style="text-decoration: none; color: black; font-weight: 600;">
                                        @comment.FullName
                                    </a>}
                                    <p style="font-size: 0.875rem; color: gray;">@comment.Date.ToShortDateString()</p>
                                </div>
                                <p>@comment.Text</p>
                            </div>
                        }}else
                            {
                             <p>No comments available</p>
                            }
        </div>
                }
    </div>
        }
    </div>
}

     }
   
</div>



@code {
    private Memoire selectedMemoire;
    List<Memoire> userTheses;
     private List<CommentDto> comments = new List<CommentDto>(); 
    private Comment newComment = new();

    protected override async Task OnInitializedAsync()
    {
        var userId = UserState.CurrentUser?.UserID;
        if (userId != null)
        {
            userTheses = await Http.GetFromJsonAsync<List<Memoire>>($"api/these/user/{userId}");
        }
    }
  private string UserImage = "emptyimage.jpg"; // Default image
private ElementReference fileInput;
     private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var content = new MultipartFormDataContent();
            var streamContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024)); // 5 MB max
            content.Add(streamContent, "file", file.Name);

            var response = await Http.PostAsync($"http://localhost:5110/api/users/upload-profile-picture/{UserState.CurrentUser.UserID}", content);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<JsonElement>();
                var path = json.GetProperty("path").GetString();

                // Update user state so the image is refreshed
                UserState.CurrentUser.PicturePath = path;
                StateHasChanged();
            }else
            {
                // Optionally show error
                Console.WriteLine("Upload failed.");
            }
        }
    }



     IBrowserFile? selectedFile;

   ThesisUploadDto uploadDto;

protected override void OnInitialized()
{
    uploadDto = new ThesisUploadDto
    {
        ProfessorID = UserState.CurrentUser.UserID
    };
}


    private ThesisUploadDto newThesis = new();
    private IBrowserFile? selectedPdf;

    private async Task HandleThesisUpload(InputFileChangeEventArgs e)
    {
      selectedPdf = e.File;
       Console.WriteLine($"✅ File selected: {selectedPdf.Name}");
   
    }

    private async Task SubmitThesisAsync()
    {
        if (selectedPdf != null)
        {
            var content = new MultipartFormDataContent();

            content.Add(new StringContent(newThesis.Title), "Title");
            content.Add(new StringContent(newThesis.Field), "Field");
            content.Add(new StringContent(newThesis.Keywords), "Keywords");
            content.Add(new StringContent(newThesis.AuthorName), "AuthorName");
            newThesis.ProfessorID = UserState.CurrentUser.UserID;
             content.Add(new StringContent(newThesis.ProfessorID.ToString()), "ProfessorID"); 
             content.Add(new StringContent(DateTime.UtcNow.ToString("o")), "Date");
            var fileContent = new StreamContent(selectedPdf.OpenReadStream(maxAllowedSize: 10_000_000));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedPdf.ContentType);

            content.Add(fileContent, "file", selectedPdf.Name);

            var response = await Http.PostAsync("http://localhost:5110/api/these/upload", content);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Memoire ajouter par succes");
                }
            else
            {
               Console.WriteLine("ERROR");
            }
        }else
{
    Console.WriteLine("⚠️ No file selected");
}
    }

 private async Task ShowComments(Memoire memoire)
    {
        selectedMemoire = memoire;

            try{
        // Fetch comments for the selected Memoire
        comments = await Http.GetFromJsonAsync<List<CommentDto>>($"api/comment/memoire/{memoire.MemoireID}");
        StateHasChanged();
        Console.WriteLine($"Fetched {comments?.Count} comments for Memoire {memoire.MemoireID}");
        Console.WriteLine("Comments list: " + JsonSerializer.Serialize(comments));
        // Check if no comments were found
        if (comments == null || !comments.Any())
        {
            comments = new List<CommentDto>(); // Ensure it's not null
            Console.WriteLine("No comments found for the selected Memoire.");
        }
    }
    catch (Exception ex)
    {
        // Handle any errors that occur during the HTTP request
        Console.WriteLine($"Error fetching comments for Memoire {memoire.MemoireID}: {ex.Message}");
        comments = new List<CommentDto>(); // Avoid null reference
    }
    }

    // Function to handle adding a new comment
    private async Task SubmitComment()
    {
        if (!string.IsNullOrWhiteSpace(newComment.Text))
        {
            @* newComment.Date = DateTime.Now;*@
            newComment.MemoireID = selectedMemoire.MemoireID; 

            if (UserState.CurrentUser != null)
            {
              newComment.UserID = UserState.CurrentUser.UserID; 
             
            }
            var json = JsonSerializer.Serialize(newComment);
        Console.WriteLine("Comment being sent: " + json);

            var response = await Http.PostAsJsonAsync("api/comment", newComment);

            if (response.IsSuccessStatusCode)
            {
                // After posting the comment, refresh the comment list.
            
                 newComment = new Comment
            {
                MemoireID = selectedMemoire.MemoireID,
                UserID = UserState.CurrentUser.UserID
            };
              // Clear the comment input field
            }
             else
        {
              
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to post comment: " + error);
        }
        await ShowComments(selectedMemoire);
        }
    }

    
    public class ThesisUploadDto
    {
        public string Title { get; set; }
        public string Field { get; set; }
        public string Keywords { get; set; }
        public string AuthorName { get; set; }
         public int ProfessorID { get; set; } 
        public IBrowserFile file { get; set; }

    
     }
   }
