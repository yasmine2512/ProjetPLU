@page "/profile"
@layout MainLayout
@inject HttpClient Http
@inject UserState UserState
@using System.Text.Json
@using Memoireclass.Models



<div class="profile-container">
    <div class="profile-card">
  <!-- Profile Image -->
   
   @if (!string.IsNullOrEmpty(UserState.CurrentUser?.PicturePath))
{
    <img src="@($"http://localhost:5110/{UserState.CurrentUser.PicturePath}")" alt="Profile Picture" class="profile-img" width="150" />
}
else
{
    <img src="@UserImage" alt="Profile Picture" class="profile-img" />
 
}


    <h4><strong> @UserState.CurrentUser.FullName </strong></h4>
 
         <!-- File input and label (styled as a button) -->
    <div class="mt-3">
       <InputFile id="fileInput" style="display: none;" OnChange="HandleFileSelected" accept="image/*" />
         <label for="fileInput" class="btn btn-outline-primary">Change Picture</label>
        @* <input id="fileInput" type="file" @onchange="HandleImageChange" style="display: none;" accept="image/*" />  *@
    </div>
     <div class="mt-4">
            <p><strong>University:</strong> @UserState.CurrentUser.University</p>
            <p><strong>Major:</strong> @UserState.CurrentUser.Major</p>
            <p><strong>Specialty:</strong> @UserState.CurrentUser?.Specialty</p>
 
        </div>

       
    </div>

     @if (UserState.CurrentUser.Role == "Administrator")
    { 
    
       <br>
        <br>
        <hr>

       
         <div style="display: flex; justify-content: center; margin-top: 2rem;">
            <div style="border: 1px solid #ccc; border-radius: 10px; padding: 2rem; width: 600px; background-color: #f9f9f9;">
             
            <h3>Add a These</h3>

            <div class="form-group">
                <label>Title</label>
                <input class="form-control" @bind="newThesis.Title" />
            </div>
            <div class="form-group">
                <label>Field</label>
                <input class="form-control" @bind="newThesis.Field" />
            </div>
            <div class="form-group">
                <label>Keywords</label>
                <input class="form-control" @bind="newThesis.Keywords" />
            </div>
            <div class="form-group">
                <label>Author Name</label>
                <input class="form-control" @bind="newThesis.AuthorName" />
            </div>
            <div class="form-group mt-2">
                <InputFile OnChange="HandleThesisUpload" accept="application/pdf" />
            </div>

            <div class="mt-3">
                <button class="btn btn-success" @onclick="SubmitThesisAsync">Submit</button>

            </div>

         </div>
         </div>
     }
    <br>
    <br>
    <hr>
</div>



@code {
  private string UserImage = "emptyimage.jpg"; // Default image
private ElementReference fileInput;
     private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var content = new MultipartFormDataContent();
            var streamContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024)); // 5 MB max
            content.Add(streamContent, "file", file.Name);

            var response = await Http.PostAsync($"http://localhost:5110/api/users/upload-profile-picture/{UserState.CurrentUser.UserID}", content);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<JsonElement>();
                var path = json.GetProperty("path").GetString();

                // Update user state so the image is refreshed
                UserState.CurrentUser.PicturePath = path;
                StateHasChanged();
            }else
            {
                // Optionally show error
                Console.WriteLine("Upload failed.");
            }
        }
    }



     IBrowserFile? selectedFile;

   ThesisUploadDto uploadDto;

protected override void OnInitialized()
{
    uploadDto = new ThesisUploadDto
    {
        ProfessorID = UserState.CurrentUser.UserID
    };
}


    private ThesisUploadDto newThesis = new();
    private IBrowserFile? selectedPdf;

    private async Task HandleThesisUpload(InputFileChangeEventArgs e)
    {
      selectedPdf = e.File;
       Console.WriteLine($"✅ File selected: {selectedPdf.Name}");
   
    }

    private async Task SubmitThesisAsync()
    {
        if (selectedPdf != null)
        {
            var content = new MultipartFormDataContent();

            content.Add(new StringContent(newThesis.Title), "Title");
            content.Add(new StringContent(newThesis.Field), "Field");
            content.Add(new StringContent(newThesis.Keywords), "Keywords");
            content.Add(new StringContent(newThesis.AuthorName), "AuthorName");
            newThesis.ProfessorID = UserState.CurrentUser.UserID;
             content.Add(new StringContent(newThesis.ProfessorID.ToString()), "ProfessorID"); 
             content.Add(new StringContent(DateTime.UtcNow.ToString("o")), "Date");
            var fileContent = new StreamContent(selectedPdf.OpenReadStream(maxAllowedSize: 10_000_000));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedPdf.ContentType);

            content.Add(fileContent, "file", selectedPdf.Name);

            var response = await Http.PostAsync("http://localhost:5110/api/these/upload", content);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Memoire ajouter par succes");
                }
            else
            {
               Console.WriteLine("ERROR");
            }
        }else
{
    Console.WriteLine("⚠️ No file selected");
}
    }

    
    public class ThesisUploadDto
    {
        public string Title { get; set; }
        public string Field { get; set; }
        public string Keywords { get; set; }
        public string AuthorName { get; set; }
         public int ProfessorID { get; set; } 
        public IBrowserFile file { get; set; }

    
     }
   }

