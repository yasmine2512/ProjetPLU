@page "/profile"
@layout MainLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject UserState UserState
@using System.Text.Json
@using Memoireclass.Models
@using Comment.Models
@using CommentDto.Models


<div class="profile-container">
    <div class="profile-card">
  <!-- Profile Image -->
   
   @if (!string.IsNullOrEmpty(UserState.CurrentUser?.PicturePath))
{
    <img src="@($"http://localhost:5110/{UserState.CurrentUser.PicturePath}")" alt="Profile Picture" class="profile-img" width="150" />
}
else
{
    <img src="@UserImage" alt="Profile Picture" class="profile-img" />
 
}


    <h4><strong> @UserState.CurrentUser.FullName </strong></h4>
 
         <!-- File input and label (styled as a button) -->
    <div class="mt-3">
       <InputFile id="fileInput" style="display: none;" OnChange="HandleFileSelected" accept="image/*" />
         <label for="fileInput" class="btn btn-outline-primary">Change Picture</label>
        @* <input id="fileInput" type="file" @onchange="HandleImageChange" style="display: none;" accept="image/*" />  *@
    </div>
     <div class="mt-4">
            <p><strong>University:</strong> @UserState.CurrentUser.University</p>
            <p><strong>Major:</strong> @UserState.CurrentUser.Major</p>
            <p><strong>Specialty:</strong> @UserState.CurrentUser?.Specialty</p>
 
        </div>

       
    </div>
<br>
     @if (UserState.CurrentUser.Role == "Administrator")
    { 
    
       <br>
        <br>
        <hr>
        <div class="d-flex justify-content-between align-items-center">
        <h2  class="text-2xl font-bold mb-2 mt-2" style="color: #001f54; font-size: 48px;"> &nbsp; My Theses</h2>
          
<button class="btn btn-primary showform" @onclick="ShowForm">Add a These</button>
@if (showForm) 
{
    <div class="modal" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add a These</h5>
                    <button type="button" class="close" @onclick="CancelForm">&times;</button>
                </div>
                <div class="modal-body">
                <span style="color: red;">@message</span>
                    <div class="form-group">
                        <label>Title</label>
                        <input class="form-control" @bind="newThesis.Title" />
                    </div>
                    <div class="form-group">
                        <label>Field</label>
                        <input class="form-control" @bind="newThesis.Field" />
                    </div>
                    <div class="form-group">
                        <label>Keywords</label>
                        <input class="form-control" @bind="newThesis.Keywords" />
                    </div>
                    <div class="form-group">
                        <label>Author Name</label>
                        <input class="form-control" @bind="newThesis.AuthorName" />
                    </div>
                    <div class="form-group mt-2">
                        <InputFile OnChange="HandleThesisUpload" accept="application/pdf" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary modal-buttons" @onclick="CancelForm">Cancel</button>
                    <button class="btn btn-success modal-buttons" @onclick="SubmitThesisAsync">Submit</button>
                </div>
            </div>
        </div>
    </div>
}
         </div>


<br>
@if (userTheses == null)
{
    <p class="d-flex justify-content-center align-items-center">Loading...</p>
    <br>
}
else if (userTheses.Count == 0)
{
    <p class="d-flex justify-content-center align-items-center">No theses found.</p>
    <br>
}
else
{
    <div class="grid grid-cols-1 gap-4 m-2">
 @foreach (var memoire in userTheses){
    string[] keywordsArray = memoire.Keywords.Split(',');
            <div class="thesis-card ">
            <div class="card-header">
            <h3 class="thesis-title rounded-xl" style="margin: 0; display: flex; align-items: center; gap: 10px;">
            <div style="display: flex; align-items: center; gap: 10px; ">
             @if (!string.IsNullOrEmpty(memoire.ProfessorPicturePath )){
            <img src="@($"http://localhost:5110/{memoire.ProfessorPicturePath}")"
             alt="Professor"
             style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                }
                else{
                 <img src="@UserImage" alt="Profile Picture"  style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                }
             @if(memoire.ProfessorID == UserState.CurrentUser.UserID){
            <h4> <a href="@($"/profile")" style="text-decoration: none;  font-weight: 600; color: black;">
            @memoire.ProfessorName</a></h4>
            }else{
            <h4> <a href="@($"/profile/{memoire.ProfessorID}")" style="text-decoration: none; font-weight: 600; color: black;">
            @memoire.ProfessorName</a></h4>
            }
            </div>
                    </h3>
                <span class="thesis-type ">@memoire.Date.ToShortDateString()</span>
            </div>
            <div class="card-body">
                 <h1 class="text-xl font-semibold" style="color:#001f54 ;font-weight: bolder;  font-size: 3em;">@memoire.Title</h1>
                 <br>
                <div class="thesis-info">
                    <svg viewBox="0 0 24 24"><path d="M12 4a4 4 0 1 0 0 8 4 4 0 0 0 0-8zm0 10c4.42 0 8 1.79 8 4v2H4v-2c0-2.21 3.58-4 8-4z"/></svg>
                    <span>Author : @memoire.AuthorName</span>
                </div>
                <div class="thesis-info">
                    <svg viewBox="0 0 24 24"><path d="M20 6h-4V4c0-1.11-.89-2-2-2H6c-1.11 0-2 .89-2 2v16c0 1.11.89 2 2 2h12c1.11 0 2-.89 2-2v-4h2l2-3V8l-2-3zM8 4h8v2H8V4zm12 16H6V4h2v2h8V4h2v16z"/></svg>
                    <span>Field : @memoire.Field</span>
                </div>
                <div class="thesis-info">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="bi bi-calendar4" viewBox="0 0 16 16">
                    <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5M2 2a1 1 0 0 0-1 1v1h14V3a1 1 0 0 0-1-1zm13 3H1v9a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1z"/>
                    </svg>
                    <span>Year :@memoire.Date.Year</span>
                </div>
                <br>
                <div class="thesis-info ">
                @foreach(var keyword in keywordsArray){
                    <div class="keyword">
                        @keyword
                    </div>
                }
                </div>
            </div>
            <div class="consultbutton">
            <a class="consult-button " href="@($"/memoire/{memoire.MemoireID}")" style="text-decoration: none;" ><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-book" viewBox="0 0 16 16">
  <path d="M1 2.828c.885-.37 2.154-.769 3.388-.893 1.33-.134 2.458.063 3.112.752v9.746c-.935-.53-2.12-.603-3.213-.493-1.18.12-2.37.461-3.287.811zm7.5-.141c.654-.689 1.782-.886 3.112-.752 1.234.124 2.503.523 3.388.893v9.923c-.918-.35-2.107-.692-3.287-.81-1.094-.111-2.278-.039-3.213.492zM8 1.783C7.015.936 5.587.81 4.287.94c-1.514.153-3.042.672-3.994 1.105A.5.5 0 0 0 0 2.5v11a.5.5 0 0 0 .707.455c.882-.4 2.303-.881 3.68-1.02 1.409-.142 2.59.087 3.223.877a.5.5 0 0 0 .78 0c.633-.79 1.814-1.019 3.222-.877 1.378.139 2.8.62 3.681 1.02A.5.5 0 0 0 16 13.5v-11a.5.5 0 0 0-.293-.455c-.952-.433-2.48-.952-3.994-1.105C10.413.809 8.985.936 8 1.783"/>
</svg> Consult Document</a>
             </div>
              <div class="mt-3 mb-2" style="display: flex; justify-content: center; align-items: center;">
        <embed src="@($"http://localhost:5110/{memoire.FilePath}")" type="application/pdf" width="80%" height="400px"  />
         </div>  
                     <div class="card-footer">
                <button class=" px-4 py-2 rounded btn" @onclick="() => DeleteThese(memoire.MemoireID)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
  <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
  <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
</svg>
                  &nbsp;  Delete These</button>
                <button class="px-4 py-2 rounded btn" @onclick="() => ShowComments(memoire)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chat" viewBox="0 0 16 16">
                    <path d="M2.678 11.894a1 1 0 0 1 .287.801 11 11 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8 8 0 0 0 8 14c3.996 0 7-2.807 7-6s-3.004-6-7-6-7 2.808-7 6c0 1.468.617 2.83 1.678 3.894m-.493 3.905a22 22 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a10 10 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9 9 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105"/>
                    </svg>
                   &nbsp; Comments</button>
            </div>
            <br>
            @if (selectedMemoire != null && selectedMemoire.MemoireID == memoire.MemoireID && isactive == true){
                <hr>
        <div class="comments-section mt-4" style="margin: 30px;">
     
                        <EditForm Model="newComment" OnValidSubmit="SubmitComment">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <InputTextArea @bind-Value="newComment.Text" placeholder="Write a comment..." class="form-control mb-2" />
                            <button type="submit" class="btn">Post Comment</button>
                        </EditForm>
                        <br>
                         <h4 class="font-semibold">Comments</h4>
                        @if (comments != null && comments.Any())
                    {
                        @foreach (var comment in comments)
                        {
                            <div class="comment">
                                <div style="display: flex; gap: 10px; align-items: center;  margin-bottom: 3px;">
                                     @if (!string.IsNullOrEmpty(comment.PicturePath))
                {
                    <img src="@($"http://localhost:5110/{comment.PicturePath}")"
                                         alt="User"
                                         style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />  
                }
                else
                {
                 <img src="@UserImage" alt="Profile Picture"  style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />
 
                }
                @if(comment.UserID == UserState.CurrentUser.UserID){
                    <a href="@($"/profile")" style="text-decoration: none; color: black; font-weight: 600;">
                                        @comment.FullName
                                    </a>
                }else{
                                    <a href="@($"/profile/{comment.UserID}")" style="text-decoration: none; color: black; font-weight: 600;">
                                        @comment.FullName
                                    </a>}
                                    <p style="font-size: 0.875rem; color: gray;">@comment.Date.ToShortDateString()</p>
                                </div>
                                <div style="display: flex; justify-content: space-between; align-items: center;">
                                <p>@comment.Text</p>
                                 @if ( comment.UserID == UserState.CurrentUser.UserID)
                             { 
                            <button class="delete-button bi-trash-nav-menu" @onclick="() => DeleteComment(comment.CommentID)" style="border: none; cursor: pointer; color: red; width: 30px; height: 30px; border-radius: 50%;">
                            </button>
                          
                              }   
                                </div>
                            </div>
                        }}else
                            {
                             <p>No comments available</p>
                            }
        </div>
                }
    </div>
        <br> 
        }
    </div>

}

     }
   
</div>



@code {
      private bool showForm = false;
      private bool isactive = false;
      private void ShowForm()
    {
        showForm = true; // Display the form when the button is clicked
    }

    private void CancelForm()
    {
        showForm = false; // Hide the form when cancel is clicked
    }
    private Memoire selectedMemoire;
    List<Memoire> userTheses;
     private List<CommentDto> comments = new List<CommentDto>(); 
    private Comment newComment = new();

    protected override async Task OnInitializedAsync()
    {
        var userId = UserState.CurrentUser?.UserID;
        if (userId != null)
        {
            userTheses = await Http.GetFromJsonAsync<List<Memoire>>($"api/these/user/{userId}");
        }
    }
  private string UserImage = "emptyimage.jpg"; // Default image
private ElementReference fileInput;
     private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null)
        {
            var content = new MultipartFormDataContent();
            var streamContent = new StreamContent(file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024)); // 5 MB max
            content.Add(streamContent, "file", file.Name);

            var response = await Http.PostAsync($"http://localhost:5110/api/users/upload-profile-picture/{UserState.CurrentUser.UserID}", content);

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadFromJsonAsync<JsonElement>();
                var path = json.GetProperty("path").GetString();

                // Update user state so the image is refreshed
                UserState.CurrentUser.PicturePath = path;
                StateHasChanged();
            }else
            {
                // Optionally show error
                Console.WriteLine("Upload failed.");
            }
        }
    }



     IBrowserFile? selectedFile;

   ThesisUploadDto uploadDto;

protected override void OnInitialized()
{
    uploadDto = new ThesisUploadDto
    {
        ProfessorID = UserState.CurrentUser.UserID
    };
}


    private ThesisUploadDto newThesis = new();
    private IBrowserFile? selectedPdf;

    private async Task HandleThesisUpload(InputFileChangeEventArgs e)
    {
      selectedPdf = e.File;
       Console.WriteLine($"✅ File selected: {selectedPdf.Name}");
   
    }
private string message ="";
    private async Task SubmitThesisAsync()
    {
        if (selectedPdf != null)
        {
            var content = new MultipartFormDataContent();

            content.Add(new StringContent(newThesis.Title), "Title");
            content.Add(new StringContent(newThesis.Field), "Field");
            content.Add(new StringContent(newThesis.Keywords), "Keywords");
            content.Add(new StringContent(newThesis.AuthorName), "AuthorName");
            newThesis.ProfessorID = UserState.CurrentUser.UserID;
             content.Add(new StringContent(newThesis.ProfessorID.ToString()), "ProfessorID"); 
             content.Add(new StringContent(DateTime.UtcNow.ToString("o")), "Date");
            var fileContent = new StreamContent(selectedPdf.OpenReadStream(maxAllowedSize: 10_000_000));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedPdf.ContentType);

            content.Add(fileContent, "file", selectedPdf.Name);

            var response = await Http.PostAsync("http://localhost:5110/api/these/upload", content);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Memoire ajouter par succes");
                message = "";
                 StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "Thesis added successfully!");
                await RefreshThesesAsync();
                }
            else
            {
               Console.WriteLine("ERROR");
               message = "Error , file selected should be a PDF";
            }
        }else
{
    Console.WriteLine("⚠️ No file selected");
}
    }

 private async Task ShowComments(Memoire memoire)
    { if(isactive){
            isactive = false;
        }else{
            isactive = true;
        selectedMemoire = memoire;

            try{
        // Fetch comments for the selected Memoire
        comments = await Http.GetFromJsonAsync<List<CommentDto>>($"api/comment/memoire/{memoire.MemoireID}");
        StateHasChanged();
        Console.WriteLine($"Fetched {comments?.Count} comments for Memoire {memoire.MemoireID}");
        Console.WriteLine("Comments list: " + JsonSerializer.Serialize(comments));
        // Check if no comments were found
        if (comments == null || !comments.Any())
        {
            comments = new List<CommentDto>(); // Ensure it's not null
            Console.WriteLine("No comments found for the selected Memoire.");
        }
    }
    catch (Exception ex)
    {
        // Handle any errors that occur during the HTTP request
        Console.WriteLine($"Error fetching comments for Memoire {memoire.MemoireID}: {ex.Message}");
        comments = new List<CommentDto>(); // Avoid null reference
    }}
    }

    // Function to handle adding a new comment
    private async Task SubmitComment()
    {
        if (!string.IsNullOrWhiteSpace(newComment.Text))
        {
            @* newComment.Date = DateTime.Now;*@
            newComment.MemoireID = selectedMemoire.MemoireID; 

            if (UserState.CurrentUser != null)
            {
              newComment.UserID = UserState.CurrentUser.UserID; 
             
            }
            var json = JsonSerializer.Serialize(newComment);
        Console.WriteLine("Comment being sent: " + json);

            var response = await Http.PostAsJsonAsync("api/comment", newComment);

            if (response.IsSuccessStatusCode)
            {
                // After posting the comment, refresh the comment list.
            
                 newComment = new Comment
            {
                MemoireID = selectedMemoire.MemoireID,
                UserID = UserState.CurrentUser.UserID
            };
              // Clear the comment input field
            }
             else
        {
              
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to post comment: " + error);
        }
        isactive = false;
        await ShowComments(selectedMemoire);
        }
    }
private async Task DeleteThese(int id){
  bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete thesis with ID {id}?");
        if (!confirmed)
            return;

        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5110/api/these/{id}");
            if (response.IsSuccessStatusCode)
            {
               
                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "Thesis deleted successfully!");
                await RefreshThesesAsync();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to delete thesis: {error}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
}
    private async Task DeleteComment(int commentId)
{
    bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
    if (!confirmed)
        return;

    try
    {
        var response = await Http.DeleteAsync($"api/comment/{commentId}");
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Comment deleted successfully.");
            isactive = false;
            await ShowComments(selectedMemoire); // Refresh the comments list
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to delete comment: {error}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Error deleting comment: " + ex.Message);
     } 
}
private async Task RefreshThesesAsync(){
         var userId = UserState.CurrentUser?.UserID;
        if (userId != null)
        {
            userTheses = await Http.GetFromJsonAsync<List<Memoire>>($"api/these/user/{userId}");
        }
 }
    public class ThesisUploadDto
    {
        public string Title { get; set; }
        public string Field { get; set; }
        public string Keywords { get; set; }
        public string AuthorName { get; set; }
         public int ProfessorID { get; set; } 
        public IBrowserFile file { get; set; }

    
     }
   }
