@page "/userExplore"
@inject MemoireService MemoireService
@inject UserState UserState
@using Memoireclass.Models
@inject HttpClient Http
@using Comment.Models
@using CommentDto.Models
@using Favorite.Models
@using FavoriteDto.Models
@using System.Text.Json;
<style>
    .btn{
    background-color: #002855 ;
    color: white;
}
.btn:hover{
    background-color:  #004080 ;
}
</style>

<h2 class="text-2xl font-bold mb-4 mt-2">  &nbsp; &nbsp; &nbsp; Explore Theses</h2>

@if (memoires == null)
{
    <p>Loading...</p>
}
else if (memoires.Count == 0)
{
    <p>No theses found.</p>
}
else
{
    <div class="grid grid-cols-1 gap-4 m-2">
        @foreach (var memoire in memoires)
        {<div class="thesis-card p-4 bg-white border rounded shadow-lg m-3">
          
<div class="rounded-xl" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; ">
    <!-- Left: Profile picture and name -->
    <div style="display: flex; align-items: center; gap: 10px;">
     @if (!string.IsNullOrEmpty(memoire.ProfessorPicturePath ))
                {
<img src="@($"http://localhost:5110/{memoire.ProfessorPicturePath}")"
             alt="Professor"
             style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                }
                else
                {
                 <img src="@UserImage" alt="Profile Picture"  style="width: 50px; height: 50px; border-radius: 50%; object-fit: cover;" />
                }
        @if(memoire.ProfessorID == UserState.CurrentUser.UserID){
     <h4> <a href="@($"/profile")" style="text-decoration: none; color: black; font-weight: 600;">
    @memoire.ProfessorName</a></h4>
}else{
 <h4> <a href="@($"/profile/{memoire.ProfessorID}")" style="text-decoration: none; color: black; font-weight: 600;">
    @memoire.ProfessorName</a></h4>
}
    </div>

    <!-- Right: Date -->
    <p style="margin: 0; color: gray; font-size: 0.875rem;">@memoire.Date.ToShortDateString()</p>
</div>
    
            <div class="mb-2">
                <h3 class="text-xl font-semibold">@memoire.Title</h3>
                <p><strong>Field:</strong> @memoire.Field</p>
                @* <p><strong>Keywords:</strong> @memoire.Keywords</p> *@
                <p><strong>Author:</strong> @memoire.AuthorName</p>
                @* <p><strong>Date:</strong> @memoire.Date.ToShortDateString()</p> *@
                @* <a href="@($"http://localhost:5110/{memoire.FilePath}")" target="_blank" class="text-blue-600 underline">View PDF</a> *@
            </div>
            <div class="mt-3 mb-2">
        <embed src="@($"http://localhost:5110/{memoire.FilePath}")" type="application/pdf" width="100%" height="400px" />
         </div>
         <div class="flex gap-3 justify-end mt-2">
        <button class=" px-4 py-2 rounded btn" @onclick="() => AddToFavorites(memoire)">Add to Favorites</button>
      
        <button class="px-4 py-2 rounded btn" @onclick="() => ShowComments(memoire)">Comments</button>
    </div>

        <!-- Comments Section -->

 @if (selectedMemoire != null && selectedMemoire.MemoireID == memoire.MemoireID)
                {
        <div class="comments-section mt-4">
             <!-- Comment Form -->
                        <EditForm Model="newComment" OnValidSubmit="SubmitComment">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <!-- Text area for new comment -->
                            <InputTextArea @bind-Value="newComment.Text" placeholder="Write a comment..." class="form-control mb-2" />
                            <button type="submit" class="btn">Post Comment</button>
                        </EditForm>
                        <br>
                         <h4 class="font-semibold">Comments</h4>
                        @if (comments != null && comments.Any())
                    {
                        @foreach (var comment in comments)
                        {
                            <div class="comment">
                                <div style="display: flex; gap: 10px; align-items: center;">
                                     @if (!string.IsNullOrEmpty(comment.PicturePath))
                {
                    <img src="@($"http://localhost:5110/{comment.PicturePath}")"
                                         alt="User"
                                         style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />  
                }
                else
                {
                 <img src="@UserImage" alt="Profile Picture"  style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;" />
 
                }
                @if(comment.UserID == UserState.CurrentUser.UserID){
                    <a href="@($"/profile")" style="text-decoration: none; color: black; font-weight: 600;">
                                        @comment.FullName
                                    </a>
                }else{
                                    <a href="@($"/profile/{comment.UserID}")" style="text-decoration: none; color: black; font-weight: 600;">
                                        @comment.FullName
                                    </a>}
                                    <p style="font-size: 0.875rem; color: gray;">@comment.Date.ToShortDateString()</p>
                                </div>
                                <p>@comment.Text</p>
                            </div>
                        }}else
                            {
                             <p>No comments available</p>
                            }
        </div>
                }

    </div>
        }
    </div>
}

@code {
   private string UserImage = "emptyimage.jpg"; // Default image

    private List<Memoire> memoires;
    private Memoire selectedMemoire;
    private List<CommentDto> comments = new List<CommentDto>(); 
    private Comment newComment = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Calls your GetAll() endpoint in TheseController
            memoires = await Http.GetFromJsonAsync<List<Memoire>>("api/these");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching theses: " + ex.Message);
            memoires = new(); // avoid null reference
        }
    }

    // Function to handle showing comments for a selected Memoire
    private async Task ShowComments(Memoire memoire)
    {
        selectedMemoire = memoire;

        // Fetch comments for the selected Memoire
        @* comments = await Http.GetFromJsonAsync<List<Comment>>($"api/comment/memoire/{memoire.MemoireID}"); *@
            try{
        // Fetch comments for the selected Memoire
        comments = await Http.GetFromJsonAsync<List<CommentDto>>($"api/comment/memoire/{memoire.MemoireID}");
        StateHasChanged();
        Console.WriteLine($"Fetched {comments?.Count} comments for Memoire {memoire.MemoireID}");
        Console.WriteLine("Comments list: " + JsonSerializer.Serialize(comments));
        // Check if no comments were found
        if (comments == null || !comments.Any())
        {
            comments = new List<CommentDto>(); // Ensure it's not null
            Console.WriteLine("No comments found for the selected Memoire.");
        }
    }
    catch (Exception ex)
    {
        // Handle any errors that occur during the HTTP request
        Console.WriteLine($"Error fetching comments for Memoire {memoire.MemoireID}: {ex.Message}");
        comments = new List<CommentDto>(); // Avoid null reference
    }
    }

    // Function to handle adding a new comment
    private async Task SubmitComment()
    {
        if (!string.IsNullOrWhiteSpace(newComment.Text))
        {
            @* newComment.Date = DateTime.Now;*@
            newComment.MemoireID = selectedMemoire.MemoireID; 
            

            if (UserState.CurrentUser != null)
            {
              newComment.UserID = UserState.CurrentUser.UserID; 
            }
            var json = JsonSerializer.Serialize(newComment);
        Console.WriteLine("Comment being sent: " + json);

            var response = await Http.PostAsJsonAsync("api/comment", newComment);

            if (response.IsSuccessStatusCode)
            {
                // After posting the comment, refresh the comment list.
            
                 newComment = new Comment
            {
                MemoireID = selectedMemoire.MemoireID,
                UserID = UserState.CurrentUser.UserID
            };
              // Clear the comment input field
            }
             else
        {
              
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine("Failed to post comment: " + error);
        }
        await ShowComments(selectedMemoire);
        }
    }


    private async Task AddToFavorites(Memoire memoire)
{
    if (UserState.CurrentUser == null)
    {
        Console.WriteLine("User not logged in.");
        return;
    }

    var favorite = new FavoriteDto
    {
        UserID = UserState.CurrentUser.UserID,
        MemoireID = memoire.MemoireID,

    };

    try
    {
        var response = await Http.PostAsJsonAsync("api/favorite", favorite);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Memoire added to favorites!");
            // Optionally show toast or update UI
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Error adding to favorites: {error}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine("Exception adding to favorites: " + ex.Message);
    }
}
}
